
МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії


ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №5
На тему: «Розгортання програмної системи та демонстрація її роботи»



Виконав ст. гр. ПЗПІ-22-6
Скрягін О.С.

Перевірив:
доц. Сокорчук І.П.




Харків 2024

1. Розгортання програмної системи та демонстрація її роботи
1.1 Мета роботи
Розгорнути програмну систему та продемонструвати її роботу.
1.2	Хід роботи
1.2.1	Розгортання бази даних
Процес перенесення бази даних почався зі створення резервної копії локальної бази даних. Для цього використовувалася утиліта pg_dump, яка дозволяє експортувати як структуру, так і дані. Команда для створення резервної копії мала вигляд:
pg_dump -U <username> -h <localhost> -p <port> -F c -b -v -f backup.dump <database_name>
Це забезпечило збереження всієї інформації в одному файлі, що було необхідно для подальшого імпорту.
На платформі Neon PostgreSQL було створено новий обліковий запис та проект. За допомогою веб-інтерфейсу створено нову базу даних, а також отримано необхідні дані для підключення: хост, порт, ім'я користувача та пароль. Ці параметри використовувалися для підключення до віддаленої бази за допомогою psql.
Імпорт даних у Neon PostgreSQL здійснювався за допомогою утиліти pg_restore. Використовувалася команда:
pg_restore -U <neon_username> -h <neon_host> -p <neon_port> -d <neon_database> -v backup.dump
Ця команда забезпечила відновлення структури та даних у хмарному середовищі. Після завершення імпорту виконувалася перевірка коректності структури та наявності всіх таблиць і даних.
Параметри доступу до бази даних налаштовувалися відповідно до специфікацій додатків, які взаємодіють із базою. Конфігураційні файли додатків були оновлені, щоб використовувати нові дані підключення, такі як URL, порт, ім'я користувача і пароль. Для підключення до бази використовувалися стандартні клієнтські утиліти, що підтримують PostgreSQL.
Перенесення виконано з дотриманням усіх необхідних етапів, використовуючи інструменти PostgreSQL (pg_dump, pg_restore, psql) та веб-інтерфейс Neon PostgreSQL.
1.2.2	Розгортання серверної частини.
Для розгортання серверної частини, написаної на Django REST Framework (DRF), було використано платформу Render, яка забезпечує зручне управління і автоматизацію процесів розгортання. Нижче наведено опис основних кроків.
Спочатку створено репозиторій з кодом проєкту на платформі GitHub, де зберігалися всі необхідні файли для роботи серверної частини. До складу проєкту входили такі файли, як requirements.txt для вказання залежностей і конфігураційний файл settings.py, у якому були налаштовані підключення до бази даних і інші параметри.
На платформі Render створено новий сервіс типу "Web Service". Під час налаштування сервісу було підключено репозиторій з GitHub, що дозволило Render автоматично отримувати код для розгортання. У процесі налаштування середовища було обрано Python як середовище виконання. Для налаштування конфігурацій додано необхідні змінні середовища, зокрема DJANGO_SECRET_KEY, URL для підключення до бази даних і інші параметри, що використовувалися у проєкті.
Команди для встановлення залежностей і запуску застосунку були задані під час налаштування сервісу. Для цього використовувалися команди:
pip install -r requirements.txt
python manage.py migrate
python manage.py collectstatic --noinput
gunicorn SmartShield.wsgi
Після завершення налаштування Render автоматично розгорнув проєкт, виконавши встановлення залежностей, міграції бази даних і підготовку статичних файлів. Після успішного запуску було надано URL-адресу для доступу до серверної частини. Логи Render дозволили перевірити процес розгортання та вчасно виправити можливі помилки.
Використання Render забезпечило зручне і швидке розгортання серверної частини DRF без необхідності налаштовувати інфраструктуру вручну, що значно зекономило час і ресурси.


1.3 Висновок
Під час виконання лабораторної роботи було розгорнуто розроблювану програмну систему та продемонстровано її роботу.
	Посилання на відеозапис: https://youtu.be/AnzJ-CojB3o

