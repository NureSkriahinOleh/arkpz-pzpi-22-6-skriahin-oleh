МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії


ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №4
На тему: «Розробка IoT клієнта»



Виконав ст. гр. ПЗПІ-22-6
Скрягін О.С.

Перевірив:
доц. Сокорчук І.П.



Харків 2024

1. Розробка IoT клієнта (бізнес-логіки та функцій налаштування додатку)
1.1 Мета роботи
Розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System). 
1.2	Хід роботи
1.2.1	Розробити будову програмного забезпечення ІоТ клієнта.
Реалізація IoT-програми складається з кількох ключових компонентів, які забезпечують симуляцію роботи сенсорів, передачу даних на сервер та перевірку їх на валідність.
Програма починає з отримання інформації про доступні сенсори через API-запит до сервера. У відповідь вона отримує список сенсорів, кожен з яких має унікальний ідентифікатор, тип (наприклад, температура, вологість або концентрація газу) та іншу інформацію. Цей список використовується як база для подальшої обробки.
Система генерує дані для кожного сенсора, моделюючи їх поведінку в реальних умовах. Значення, що генеруються, розподіляються на нормальні або небезпечні залежно від заданої ймовірності. Для кожного типу сенсора є діапазони нормальних і небезпечних значень, які враховуються під час генерації.
Ключовою бізнес-логікою програми є виявлення несправних сенсорів. Для цього аналізується, наскільки поточні значення відхиляються від середнього значення для всіх сенсорів того ж типу. Якщо це відхилення перевищує заданий поріг, проводиться додаткова перевірка сусідніх сенсорів. Якщо сусідні сенсори працюють у межах норми, система позначає сенсор як потенційно несправний і формує відповідне попередження.
Кожне згенероване значення разом із ідентифікатором сенсора надсилається на сервер через API. Сервер приймає ці дані та створює відповідний лог, який може використовуватися для подальшого аналізу.
Програма працює в циклі, виконуючи описані дії через певний проміжок часу. Це дозволяє імітувати безперервну роботу IoT-системи та створювати потік даних для тестування серверної обробки, включаючи ситуації з небезпечними значеннями та несправними сенсорами.

1.2.2	Створити UML діаграму прецедентів для ІоТ клієнта.
 
Рисунок 1.2.2.1 - UML діаграма прецедентів для ІоТ клієнта.

1.2.3	Розробити бізнес логіку (математину обробку повʼязаних із предметною областю даних) та функції налаштування ІоТ клієнта.
Бізнес-логіка IoT-клієнта зосереджена на обробці даних сенсорів, їх аналізі для виявлення несправностей та передачі на сервер. Система працює в режимі симуляції, генеруючи значення для кожного сенсора залежно від його типу. Значення можуть належати до нормального або небезпечного діапазону. Небезпечні значення генеруються з певною ймовірністю, що дозволяє тестувати серверну частину на спрацювання відповідних механізмів безпеки.
Клієнт отримує список сенсорів із сервера, зберігає їх властивості та для кожного сенсора генерує випадкові значення. Після генерації виконується перевірка даних: обчислюється середнє значення для всіх сенсорів одного типу, і якщо значення конкретного сенсора значно відхиляється від цього середнього, проводиться аналіз сусідніх сенсорів. Якщо сусідні сенсори працюють у нормальному діапазоні, система позначає даний сенсор як потенційно несправний. Такі несправності не лише фіксуються, але й передаються на сервер для подальшого аналізу.
Для налаштування клієнта користувач може змінювати параметри роботи, що зберігаються в конфігураційному файлі. Наприклад, можна встановити нові діапазони нормальних та небезпечних значень для кожного типу сенсора, змінити ймовірність генерації небезпечних значень або налаштувати інтервал між циклами симуляції. Це дозволяє адаптувати роботу IoT-клієнта під різні сценарії тестування або реальної роботи.
Таким чином, IoT-клієнт не лише забезпечує генерацію та передачу даних, але й реалізує математичну обробку для виявлення несправностей, дозволяючи створювати точну модель роботи сенсорної мережі з можливістю гнучкого налаштування.
1.2.4	Створити діаграму діяльності для ІоТ клієнта.
 
Рисунок 1.2.3.1 – Діаграма діяльності для ІоТ клієнта.
1.2.5	Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Реалізація функціоналу для IoT-застосунку (див. ДОДАТОК А)
1.3 Висновок
Під час виконання лабораторної роботи було розроблено програмне забезпечення для  IoT. 
Посилання на відеозапис: https://youtu.be/zi5pXMwYHVM































ДОДАТОК А
1    import random
2    import time
3    import requests
4    from datetime import datetime
5    from concurrent.futures import ThreadPoolExecutor
6    from iot_config import API_URL, SENSORS_API_URL, HEADERS, NORMAL_RANGES, DANGEROUS_RANGES, DANGEROUS_PROBABILITY
7    
8    def fetch_sensors():
9        """
10        Fetch the list of sensors from the API.
11        """
12        try:
13            response = requests.get(SENSORS_API_URL, headers=HEADERS)
14            if response.status_code == 200:
15                return response.json()
16            else:
17                print(f"[{datetime.now()}] Failed to fetch sensor data: {response.json()}")
18                return []
19        except requests.RequestException as e:
20            print(f"[{datetime.now()}] Error fetching sensor data: {e}")
21            return []
22    
23    def generate_sensor_data(sensor_type):
24        """
25        Generate random data for a sensor with a probability of dangerous values.
26        """
27        is_dangerous = random.random() < DANGEROUS_PROBABILITY
28        if is_dangerous:
29            return random.uniform(*DANGEROUS_RANGES[sensor_type])
30        return random.uniform(*NORMAL_RANGES[sensor_type])
31    
32    def calculate_average(sensor_type, sensors):
33        """
34        Calculate the average value for a given sensor type based on all sensors of the same type.
35        """
36        values = [generate_sensor_data(s['type']) for s in sensors if s['type'] == sensor_type]
37        return sum(values) / len(values) if values else None
38    
39    def check_adjacent_sensors(sensor, sensors):
40        """
41        Check the adjacent sensors of the same type for normal values.
42        """
43        sensor_type = sensor['type']
44        adjacent_sensors = [s for s in sensors if s['type'] == sensor_type and s['id'] != sensor['id']]
45        normal_values = [NORMAL_RANGES[sensor_type][0] <= generate_sensor_data(sensor_type) <= NORMAL_RANGES[sensor_type][1] for s in adjacent_sensors]
46        return all(normal_values)
47    
48    def send_data_to_server(sensor, sensors):
49        """
50        Send sensor data to the server via API with additional fault detection logic.
51        """
52        sensor_id = sensor["id"]
53        sensor_type = sensor["type"]
54        value = generate_sensor_data(sensor_type)
55    
56        # Calculate the average value for the sensor type
57        average_value = calculate_average(sensor_type, sensors)
58        if average_value and abs(value - average_value) / average_value > 0.3:  # 30% deviation
59            if check_adjacent_sensors(sensor, sensors):
60                print(f"[{datetime.now()}] WARNING: Sensor {sensor_id} might be faulty. Value: {value:.2f}, Average: {average_value:.2f}")
61    
62        payload = {
63            "sensor_id": sensor_id,
64            "value": value
65        }
66        try:
67            response = requests.post(API_URL, json=payload, headers=HEADERS)
68            if response.status_code == 201:
69                print(f"[{datetime.now()}] Log created successfully for sensor {sensor_id} with value {value:.2f}")
70            else:
71                print(f"[{datetime.now()}] Failed to create log for sensor {sensor_id}: {response.json()}")
72        except requests.RequestException as e:
73            print(f"[{datetime.now()}] Error sending data to server for sensor {sensor_id}: {e}")
74    
75    def simulate_sensors():
76        """
77        Simulate data generation and transmission for all sensors.
78        """
79        while True:
80            sensors = fetch_sensors()
81            if sensors:
82                print(f"[{datetime.now()}] Retrieved {len(sensors)} sensors. Starting data generation...")
83                with ThreadPoolExecutor(max_workers=10) as executor:
84                    executor.map(lambda s: send_data_to_server(s, sensors), sensors)
85            else:
86                print(f"[{datetime.now()}] No sensors found or failed to fetch sensors.")
87            time.sleep(40)  # Wait 40 seconds before the next cycle
88    
89    if __name__ == "__main__":
90        print("Starting IoT sensor simulation...")
91        simulate_sensors()
