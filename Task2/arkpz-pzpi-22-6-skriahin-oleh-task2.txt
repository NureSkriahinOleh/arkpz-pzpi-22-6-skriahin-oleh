МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії


ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №2
На тему: «Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу»



Виконав ст. гр. ПЗПІ-22-6 			
Скрягін О.С. 

Перевірив:
доц. Сокорчук І.П.



Харків 2024

1. Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу(API).
1.1 Мета роботи
Розробити базу даних для серверної частини програмної системи, яка забезпечує ефективне управління пожежною безпекою, моніторинг стану датчиків, реєстрацію подій та сповіщень користувачів.
1.2	Хід роботи
1.2.1 Розробити будову програмної системи.
Серверна частина системи розроблена з використанням Django Rest Framework (DRF) для обробки запитів і роботи з даними. Як база даних використовується PostgreSQL. Для забезпечення безпеки взаємодії між клієнтами і сервером застосовується аутентифікація на основі JWT (JSON Web Tokens). Комунікація з клієнтами реалізована через API, яке забезпечує інтеграцію з мобільними додатками та IoT-сенсорами. Серверна частина зберігає відео з камер, дані з датчиків та генерує звіти по інцидентах.
Модулі серверної частини:
1) Авторизація та аутентифікація
•	Реєстрація та вхід користувачів: Реалізовано функціонал створення облікових записів для охоронців, співробітників і адміністраторів торгового центру.
•	Використання JWT: Забезпечує безпечну аутентифікацію та авторизацію, надаючи доступ до захищених ресурсів.
2) Управління користувачами
•	CRUD-операції над користувачами: Адміністратори можуть додавати, редагувати, видаляти та переглядати профілі співробітників і охоронців.
•	Призначення ролей: Встановлення ролей користувачів (охоронець, співробітник, адміністратор) для керування доступом.
3) Управління IoT-пристроями
•	Збір даних із датчиків: Система обробляє показники датчиків руху, диму, температури, газу та вологості в реальному часі.
•	Передача даних на сервер: Інформація з сенсорів синхронізується для аналізу та реагування.
•	Контроль стану пристроїв: Включає управління станом датчиків та їх оновлення.
4) Обробка інцидентів
•	Реєстрація подій: Система фіксує всі інциденти, включаючи спрацювання сенсорів або повідомлення від користувачів.
•	Зв'язок інцидентів із сенсорами: Інформація про інциденти доповнюється даними із датчиків і відеозаписами.
•	Класифікація інцидентів: Визначення рівня загрози та пріоритетів для оперативного реагування.
5) Управління відеоспостереженням
•	Зберігання записів: Система зберігає відео з камер для подальшого аналізу.
•	Доступ до відео: Адміністратори та співробітники можуть переглядати записи, пов'язані з інцидентами.
6) Модуль сповіщень
•	Push-сповіщення: Інформування користувачів про критичні події, такі як пожежа або витік газу.
•	Інтеграція з аварійними службами: Надсилання автоматичних повідомлень у разі надзвичайних ситуацій.
7) Аналітика та звіти
•	Генерація звітів: Автоматичне створення статистики по інцидентах, активності датчиків та інших параметрах.
•	Аналіз даних: Інструменти для виявлення трендів та аномалій у роботі системи безпеки.
8) API для мобільних і веб-клієнтів
•	Реалізація REST API: Забезпечує доступ мобільних і веб-додатків до даних із сервера.
•	Інтеграція із зовнішніми сервісами: Можливість підключення нових пристроїв і додаткових модулів.

1.2.2	Створити UML діаграму прецедентів для серверної частини системи.
UML-діаграма показує основні прецеденти взаємодії користувачів із системою, включаючи моніторинг стану датчиків, управління користувачами та сповіщення.
 
Рисунок 1 – UML діаграма прецедентів
1.2.3	Створити ER діаграму даних.
ER-діаграма відображає основні сутності системи: користувачі, датчики, події, сповіщення та журнали. Вона ілюструє зв’язки між таблицями, їх атрибути та ключі.
 
Рисунок 2 – ER-діаграма даних

1.2.4	Розробити базу даних (БД) програмної системи.
Таблиця 1 – Таблиця "Users"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
password	VARCHAR(128)	NOT NULL
last_login	DATETIME	NULLABLE
is_superuser	BOOLEAN	NOT NULL
username	VARCHAR(150)	UNIQUE, NOT NULL
first_name	VARCHAR(150)	-
last_name	VARCHAR(150)	-
email	VARCHAR(254)	UNIQUE
phone_number	VARCHAR(15)	NULLABLE
role	VARCHAR(10)	NOT NULL



Таблиця 2 – Таблиця " Cameras"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
location	VARCHAR(255)	NOT NULL
status	BOOLEAN	NOT NULL

Таблиця 3 – Таблиця " CameraLogs"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
file_path	VARCHAR(255)	NOT NULL
recorded_at	DATETIME	NOT NULL
camera_id	INT	Foreign Key (Cameras.id), NOT NULL

Таблиця 4 – Таблиця " Incidents"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
type	VARCHAR(20)	NOT NULL
details	TEXT	NOT NULL
created_at	DATETIME	NOT NULL
camera_id	INT	Foreign Key (Cameras.id), NULLABLE
sensor_id	INT	Foreign Key (Sensors.id), NULLABLE

Таблиця 5 – Таблиця " Notifications"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
title	VARCHAR(100)	NOT NULL
message	TEXT	NOT NULL
is_read	BOOLEAN	NOT NULL
created_at	DATETIME	NOT NULL
user_id	INT	Foreign Key (Users.id), NOT NULL
reason	VARCHAR(255)	NOT NULL
Таблиця 6 – Таблиця " Sensors"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
type	VARCHAR(20)	NOT NULL
location	VARCHAR(255)	NOT NULL
status	BOOLEAN	NOT NULL

Таблиця 7 – Таблиця " SensorLogs"
Поле	Тип даних	Обмеження

Id	INT	Primary Key, Auto_Increment
value	FLOAT	NOT NULL
timestamp	DATETIME	NOT NULL
exceeded_threshold	BOOLEAN	NOT NULL
sensor_id	INT	Foreign Key (Sensors.id), NOT NULL

1.2.5	Створити діаграму структури БД.
 
Рисунок 3 – Структура БД
1.2.6	Розробити функції роботи з БД – ORM (див. ДОДАТОК А).
1.2.7	Створити специфікацію розробленого API.
Таблиця 8 – Специфікація розробленого API.
Метод запиту	Шлях	Пояснення
POST	/register/	Реєстрація користувача. Повертає дані користувача та JWT токени доступу і оновлення.
GET	/profile/	Запит інформації про профіль поточного автентифікованого користувача.
POST	/logout/	Вихід користувача. Додає refresh-токен у чорний список
GET	/users/	Запит списку всіх користувачів.
GET	/users/<int:pk>/	Запит інформації про конкретного користувача.
PUT	/users/<int:pk>/	Оновлення інформації конкретного користувача.
DELETE	/users/<int:pk>/	Деактивація конкретного користувача.
POST	/api/token/	Отримання пари токенів (доступу та оновлення) для автентифікації.
POST	/api/token/refresh/	Оновлення токену доступу за допомогою refresh-токену.
GET	/notifications/	Отримання списку всіх сповіщень для автентифікованого користувача.
POST	/notifications/	Створення нового сповіщення для автентифікованого користувача.
GET	/notifications/<int:pk>/	Отримання інформації про конкретне сповіщення.
PUT	/notifications/<int:pk>/	Оновлення інформації про конкретне сповіщення.
DELETE	/notifications/<int:pk>/	Видалення конкретного сповіщення.
GET	/cameras/	Отримання списку всіх камер.
POST	/cameras/	Створення нової камери.
GET	/cameras/<int:pk>/	Отримання інформації про конкретну камеру.
PUT	/cameras/<int:pk>/	Оновлення інформації про конкретну камеру.
DELETE	/cameras/<int:pk>/	Видалення конкретної камери.
GET	/cameras/<int:camera_id>/logs/	Отримання списку всіх логів для конкретної камери.
POST	/cameras/<int:camera_id>/logs/	Створення нового лога для конкретної камери.
GET	/cameras/logs/<int:pk>/	Отримання інформації про конкретний лог камери
PUT	/cameras/logs/<int:pk>/	Оновлення інформації про конкретний лог камери.
DELETE	/cameras/logs/<int:pk>/	Видалення конкретного лога камери.
GET	/sensors/	Отримати список всіх сенсорів.
POST	/sensors/	Створити новий сенсор.
GET		/sensors/<int:pk>/	Отримати інформацію про конкретний сенсор з його ID.
PUT	/sensors/<int:pk>/	Оновити інформацію про конкретний сенсор.
DELETE	/sensors/<int:pk>/	Видалити сенсор за його ID.
GET	/sensors/<int:sensor_id>/logs/	Отримати список логів для конкретного сенсора.
POST	/sensors/<int:sensor_id>/logs/	Додати новий лог для сенсора.
GET	/sensors/logs/<int:pk>/	Отримати інформацію про конкретний лог сенсора за його ID.
PUT	/sensors/logs/<int:pk>/	Оновлення даних конкретного лога сенсора.
DELETE	/sensors/logs/<int:pk>/	Видалити лог сенсора за його ID.
GET	/incidents/	Отримати список усіх інцидентів.
POST	/incidents/	Створити новий інцидент.
GET	/incidents/<int:pk>/	Отримати деталі конкретного інциденту за його ID.
PUT	/incidents/<int:pk>/	Оновити інформацію про конкретний інцидент.
DELETE	/incidents/<int:pk>/	Видалити інцидент за його ID.


1.2.8	Створити програмну реалізацію розробленого API та функцій роботи з БД.
Приклад розробленого API для роботи з інцидентами, яка дозволяє виконувати дві основні операції: отримання списку звітів про інциденти та створення нового звіту. API підтримує фільтрацію за типом інциденту через параметри запиту, що дозволяє отримувати лише релевантні дані. Клас забезпечує доступ лише для авторизованих користувачів, гарантуючи захищеність інформації.
Swagger-документація інтегрована для зручного ознайомлення з ендпоінтом, включаючи можливі відповіді, описані статуси та очікувану структуру даних для запитів і відповідей.

1  class IncidentReportListView(generics.ListCreateAPIView):
2      permission_classes = [IsAuthenticated]
3      serializer_class = IncidentReportSerializer
4    
5      def get_queryset(self):
6          # Повертає інциденти. Можлива фільтрація за параметрами.
7          queryset = IncidentReport.objects.all()
8          incident_type = self.request.query_params.get('type')
9          if incident_type:
10              queryset = queryset.filter(type=incident_type)
11          return queryset.order_by('-created_at')
12    
13      @swagger_auto_schema(
14          responses={200: IncidentReportSerializer(many=True)},
15          operation_description="Retrieve a list of incident reports with optional filtering by type."
16      )
17      def get(self, request, *args, **kwargs):
18          return super().get(request, *args, **kwargs)
19    
20      @swagger_auto_schema(
21          request_body=IncidentReportSerializer,
22          responses={201: IncidentReportSerializer, 400: "Validation error"},
23          operation_description="Create a new incident report."
24      )
25      def post(self, request, *args, **kwargs):
26	        return super().post(request, *args, **kwargs)


1.2.9	Перевірити роботу створеного програмного коду серверної частини системи.
 
Рисунок 4 – Перевірка створеного API.

1.3 Висновок
Виконуючи лабораторну роботу було розроблено будову програмної системи для проекту SmartShield.

Посилання на YouTube: https://youtu.be/LSZ2xTXkQXM















ДОДАТОК А
1    class CamerasCamera(models.Model):
2        id = models.BigAutoField(primary_key=True)
3        location = models.CharField(max_length=255)
4        status = models.BooleanField()
5    
6        class Meta:
7            managed = False
8            db_table = 'cameras_camera'
9    
10    
11    class CamerasCameralog(models.Model):
12        id = models.BigAutoField(primary_key=True)
13        file_path = models.CharField(max_length=255)
14        recorded_at = models.DateTimeField()
15        camera = models.ForeignKey(CamerasCamera, models.DO_NOTHING)
16    
17        class Meta:
18            managed = False
19            db_table = 'cameras_cameralog'
20    
21    
22    class IncidentsIncidentreport(models.Model):
23        id = models.BigAutoField(primary_key=True)
24        type = models.CharField(max_length=20)
25        details = models.TextField()
26        created_at = models.DateTimeField()
27        camera = models.ForeignKey(CamerasCamera, models.DO_NOTHING, blank=True, null=True)
28        sensor = models.ForeignKey('SensorsSensor', models.DO_NOTHING, blank=True, null=True)
29    
30        class Meta:
31            managed = False
32            db_table = 'incidents_incidentreport'
33    
34    
35    class NotificationsNotification(models.Model):
36        id = models.BigAutoField(primary_key=True)
37        title = models.CharField(max_length=100)
38        message = models.TextField()
39        is_read = models.BooleanField()
40        created_at = models.DateTimeField()
41        user = models.ForeignKey('UsersUser', models.DO_NOTHING)
42        reason = models.CharField(max_length=255)
43    
44        class Meta:
45            managed = False
46            db_table = 'notifications_notification'
47    
48    
49    class SensorsSensor(models.Model):
50        id = models.BigAutoField(primary_key=True)
51        type = models.CharField(max_length=20)
52        location = models.CharField(max_length=255)
53        status = models.BooleanField()
54    
55        class Meta:
56            managed = False
57            db_table = 'sensors_sensor'
58    
59    
60    class SensorsSensorlog(models.Model):
61        id = models.BigAutoField(primary_key=True)
62        value = models.FloatField()
63        timestamp = models.DateTimeField()
64        exceeded_threshold = models.BooleanField()
65        sensor = models.ForeignKey(SensorsSensor, models.DO_NOTHING)
66    
67        class Meta:
68            managed = False
69            db_table = 'sensors_sensorlog'
70    
71    
72    class UsersUser(models.Model):
73        id = models.BigAutoField(primary_key=True)
74        password = models.CharField(max_length=128)
75        last_login = models.DateTimeField(blank=True, null=True)
76        is_superuser = models.BooleanField()
77        username = models.CharField(unique=True, max_length=150)
78        first_name = models.CharField(max_length=150)
79        last_name = models.CharField(max_length=150)
80        email = models.CharField(unique=True, max_length=254)
81        is_staff = models.BooleanField()
82        is_active = models.BooleanField()
83        date_joined = models.DateTimeField()
84        role = models.CharField(max_length=10)
85        status = models.BooleanField()
86        date_of_birth = models.DateField(blank=True, null=True)
87        phone_number = models.CharField(max_length=15, blank=True, null=True)
88    
89        class Meta:
90            managed = False
91            db_table = 'users_user'

